name: WebRTC C SDK CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches:
      - develop
      - master
jobs:
  clang-format-check:
    runs-on: macos-11
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install clang-format
        run: |
          brew install clang-format
          clang-format --version
      - name: Run clang format check
        run: |
          bash scripts/check-clang.sh

  mac-os-catalina-build-clang:
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build
          cd build
          sh -c 'cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE -DBUILD_OPENSSL_PLATFORM=darwin64-x86_64-cc;cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE -DBUILD_OPENSSL_PLATFORM=darwin64-x86_64-cc'
          make
          ./tst/webrtc_client_test

  mac-os-catalina-build-gcc:
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build
          cd build
          sh -c 'cmake .. -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE -DBUILD_OPENSSL_PLATFORM=darwin64-x86_64-cc;cmake .. -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE -DBUILD_OPENSSL_PLATFORM=darwin64-x86_64-cc'
          make
          ./tst/webrtc_client_test


  ubuntu-os-build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          # TODO: Remove the following line. This is only a workaround for enabling IPv6, https://github.com/travis-ci/travis-ci/issues/8891.
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DBUILD_TEST=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ./tst/webrtc_client_test

  address-sanitizer:
    runs-on: ubuntu-18.04
    env:
      ASAN_OPTIONS: detect_odr_violation=0:detect_leaks=1
      LSAN_OPTIONS: suppressions=../tst/suppressions/LSAN.supp
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          # TODO: Remove the following line. This is only a workaround for enabling IPv6, https://github.com/travis-ci/travis-ci/issues/8891.
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

  undefined-behavior-sanitizer:
    runs-on: ubuntu-latest
    env:
      CC: clang
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          # TODO: Remove the following line. This is only a workaround for enabling IPv6, https://github.com/travis-ci/travis-ci/issues/8891.
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

  thread-sanitizer:
    runs-on: ubuntu-18.04
    env:
      TSAN_OPTIONS: halt_on_error=1:suppressions=../tst/suppressions/TSAN.supp
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

  memory-sanitizer:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        continue-on-error: true
        run: |
          echo '{"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          mkdir build
          docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -w /src/build -dit --name msan-tester -v $(pwd):/src seaduboi/kvs-msan-tester
          msan-tester() { docker exec -it msan-tester "$@"; }
          msan-tester cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_DEPENDENCIES=FALSE -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DCMAKE_CXX_FLAGS="-stdlib=libc++ -L/usr/src/libcxx_msan/lib -lc++abi -I/usr/src/libcxx_msan/include -I/usr/src/libcxx_msan/include/c++/v1 -fsanitize=memory -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins"
          msan-tester make
          msan-tester ./tst/webrtc_client_test

  linux-gcc-4_4:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo apt-get -q update
          sudo apt-get -y install gcc-4.4
          sudo apt-get -y install gdb
      - name: Build repository
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_TEST=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

  mbedtls-ubuntu-clang:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DBUILD_TEST=TRUE -DUSE_OPENSSL=OFF -DUSE_MBEDTLS=ON
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test
  
  mbedtls-ubuntu-gcc:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo apt-get -q update
          sudo apt-get -y install gcc-4.4
          sudo apt-get -y install gdb
      - name: Build repository
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_TEST=TRUE -DUSE_OPENSSL=OFF -DUSE_MBEDTLS=ON
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

  linux-gcc-code-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build
          cd build
          cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE
          make
          export AWS_KVS_LOG_LEVEL=3
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/webrtc_client_test
      - name: Code coverage
        run: |
          for test_file in $(find CMakeFiles/kvsWebrtcClient.dir CMakeFiles/kvsWebrtcSignalingClient.dir -name '*.gcno'); do gcov $test_file; done
          bash <(curl -s https://codecov.io/bash)

  windows-msvc:
    runs-on: windows-2016
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup MSVC 
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      - name: Build and run
        run: |
          choco install nasm strawberryperl
          echo "{PATH}={/c/Strawberry/perl/site/bin:/c/Strawberry/perl/bin:/c/Strawberry/c/bin:/c/Program Files/NASM:`pwd`/open-source/lib:`pwd`/open-source/bin:$PATH}" >> $GITHUB_ENV
          .github/build_windows.bat
          cd build/tst && ./webrtc_client_test.exe --gtest_filter="-DataChannelFunctionalityTest.*:IceApiTest.*:IceFunctionalityTest.*:PeerConnectionFunctionalityTest.*:SignalingApiFunctionalityTest.*:TurnConnectionFunctionalityTest.*:RtpFunctionalityTest.marshallUnmarshallH264Data:RtpFunctionalityTest.packingUnpackingVerifySameH264Frame:RtcpFunctionalityTest.onRtcpPacketCompound:RtcpFunctionalityTest.twcc3"

  sample-check:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo apt-get -q update
          sudo apt-get -y install gcc-4.4
          sudo apt-get -y install gdb
      - name: Build repository
        run: |
          mkdir build
          cd build
          cmake ..
          make
          cd ..
          ./scripts/check-sample.sh
